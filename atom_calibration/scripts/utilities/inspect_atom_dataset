#!/usr/bin/env python3
"""
Casts an optimization problem using an ATOM dataset file as input. Then calibrates by running the optimization.
"""


# Standard imports
import signal
import sys
import argparse

# Atom imports
import atom_calibration.calibration.patterns_config as patterns
from colorama import Fore, Style
from atom_core.dataset_io import loadResultsJSON, filterSensorsFromDataset

# Ros imports
from urdf_parser_py.urdf import URDF


# -------------------------------------------------------------------------------
# --- FUNCTIONS
# -------------------------------------------------------------------------------
def signal_handler(sig, frame):
    print('Stopping optimization (Ctrl+C pressed)')
    sys.exit(0)


# -------------------------------------------------------------------------------
# --- MAIN
# -------------------------------------------------------------------------------
def main():
    # ---------------------------------------
    # --- Parse command line argument
    # ---------------------------------------
    signal.signal(signal.SIGINT, signal_handler)

    ap = argparse.ArgumentParser()
    ap.add_argument("-json", "--json_file", help="Json file containing input dataset.", type=str, required=True)

    # Roslaunch adds two arguments (__name and __log) that break our parser. Lets remove those.
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(ap.parse_args(args=arglist))

    # ---------------------------------------
    # --- INITIALIZATION Read data from file
    # ---------------------------------------
    # Loads a json file containing the detections. Returned json_file has path resolved by urireader.
    dataset, json_file = loadResultsJSON(args['json_file'])

    # ---------------------------------------
    # --- Filter some collections and / or sensors from the dataset
    # ---------------------------------------
    # dataset = filterCollectionsFromDataset(dataset, args)  # filter collections

    # Create the chessboard dataset must be called before deleting the sensors to cope with the possibility of
    # setting up an optimization without cameras. For now we MUST have a camera to estimate the initial parameters
    # related to the pattern pose (we use solve PNP for a camera).
    dataset['patterns'] = patterns.createPatternLabels(args, dataset)  # TODO: Solve this strange dependency.

    dataset = filterSensorsFromDataset(dataset, args)  # filter sensors

    print('Loaded dataset containing ' + str(len(dataset['sensors'].keys())) + ' sensors and ' + str(
        len(dataset['collections'].keys())) + ' collections.')

    print(
        'Dataset contains ' + str(len(dataset['sensors'].keys())) + ' sensors: ' + str(list(dataset['sensors'].keys())))

    # ---------------------------------------
    # --- Count incomplete collections
    # ---------------------------------------
    complete_collections = []
    incomplete_collections = []
    for collection_key, collection in dataset['collections'].items():
        is_complete = True
        for sensor_key, sensor in dataset['sensors'].items():
            if not collection['labels'][sensor_key]['detected']:
                is_complete = False

        if is_complete:
            complete_collections.append(collection_key)
        else:
            incomplete_collections.append(collection_key)

    print('Complete collections (' + str(len(complete_collections)) + '):' + str(complete_collections))
    print('Incomplete collections (' + str(len(incomplete_collections)) + '):' + str(incomplete_collections))

    # ---------------------------------------
    # --- Count partial detections
    # ---------------------------------------
    number_of_corners = int(dataset['calibration_config']['calibration_pattern']['dimension']['x']) * \
        int(dataset['calibration_config']['calibration_pattern']['dimension']['y'])
    for sensor_key, sensor in dataset['sensors'].items():
        complete_detections = []
        partial_detections = []
        if sensor['modality'] == 'rgb':  # and collection['labels'][sensor_key]['detected']:
            for collection_key, collection in dataset['collections'].items():
                if not len(collection['labels'][sensor_key]['idxs']) == number_of_corners:
                    partial_detections.append(collection_key)
                else:
                    complete_detections.append(collection_key)

            print('Sensor ' + sensor_key + ' has ' + str(len(complete_detections)) + ' complete detections: ' + str(
                complete_detections))
            print('Sensor ' + sensor_key + ' has ' + str(len(partial_detections)) + ' partial detections: ' + str(
                partial_detections))
        else:
            print('Sensor ' + sensor_key + ' is not a camera. All detections are complete.')

    # ---------------------------------------
    # --- Collection by collections
    # ---------------------------------------
   # number_of_corners = int(dataset['calibration_config']['calibration_pattern']['dimension']['x']) * \
    #                     int(dataset['calibration_config']['calibration_pattern']['dimension']['y'])
    #
    # for collection_key, collection in dataset['collections'].items():
    #     print(Fore.BLUE + 'Collection ' + collection_key + Style.RESET_ALL)
    #
    #     msg = '['
    #     count = 0
    #     for sensor_key, sensor in dataset['sensors'].items():
    #         if count > 0:
    #             msg += ', '
    #         if not collection['labels'][sensor_key]['detected']:
    #             msg += Fore.RED + sensor_key + Style.RESET_ALL
    #         else:
    #             msg += Fore.GREEN + sensor_key + Style.RESET_ALL
    #         count += 1
    #     msg += ']'
    #
    #     print('Pattern detected in sensors (' + Fore.GREEN + 'yes' + Style.RESET_ALL + ',' + Fore.RED + 'no' + Style.RESET_ALL + '): ' + msg)
    #
    #
    #     msg = '['
    #     count = 0
    #     for sensor_key, sensor in dataset['sensors'].items():
    #         if count > 0:
    #             msg += ', '
    #         if sensor['msg_type'] == 'Image' and collection['labels'][sensor_key]['detected']:
    #             if not len(collection['labels'][sensor_key]['idxs']) == number_of_corners:
    #                 msg += Fore.GREEN + sensor_key + Style.RESET_ALL
    #             else:
    #                 msg += Fore.RED + sensor_key + Style.RESET_ALL
    #         else:
    #             msg += Fore.BLACK + sensor_key + Style.RESET_ALL
    #
    #         count +=1
    #     msg += ']'
    #
    #     print('Partial detection (' + Fore.GREEN + 'yes' + Style.RESET_ALL + ',' + Fore.RED + 'no' + Style.RESET_ALL + ', na): ' + msg)

    # ---------------------------------------
    # --- Draw stylized table
    # ---------------------------------------
    from prettytable import PrettyTable
    sensor_keys = list(dataset['sensors'].keys())
    table_header = ['Collection', 'is complete']

    table_header.extend(sensor_keys)
    table = PrettyTable(table_header)

    for collection_key, collection in dataset['collections'].items():
        row = [collection_key, '---']
        is_complete = True
        for sensor_key, sensor in dataset['sensors'].items():
            # print(sensor_key)
            # if sensor['msg_type'] == 'Image' and collection['labels'][sensor_key]['detected']:
            #     if not len(collection['labels'][sensor_key]['idxs']) == number_of_corners:
            #         row.append(Fore.GREEN + 'detected' + Style.RESET_ALL)
            #     else:
            #         row.append(Fore.BLUE + 'partial' + Style.RESET_ALL)
            #
            # elif collection['labels'][sensor_key]['detected']:
            #     row.append(Fore.GREEN + 'detected' + Style.RESET_ALL)
            # else:
            #     row.append(Fore.RED + 'not detected' + Style.RESET_ALL)
            #     is_complete = False
            if sensor['modality'] == 'rgb':
                if not collection['labels'][sensor_key]['detected']:
                    row.append(Fore.RED + 'not detected' + Style.RESET_ALL)
                    is_complete = False
                else:
                    if len(collection['labels'][sensor_key]['idxs']) == number_of_corners:
                        row.append(Fore.GREEN + 'detected' + Style.RESET_ALL)
                    else:
                        row.append(Fore.BLUE + 'partial' + Style.RESET_ALL)

            else:
                if not collection['labels'][sensor_key]['detected']:
                    row.append(Fore.RED + 'not detected' + Style.RESET_ALL)
                    is_complete = False
                else:
                    row.append(Fore.GREEN + 'detected' + Style.RESET_ALL)

            # print(row)
            #
            # elif collection['labels'][sensor_key]['detected']:
            #     row.append(Fore.GREEN + 'detected' + Style.RESET_ALL)
            # else:

        if is_complete:
            row[1] = Fore.GREEN + 'yes' + Style.RESET_ALL
        else:
            row[1] = Fore.RED + 'no' + Style.RESET_ALL

        table.add_row(row)

    table.align = 'c'
    # table.align[Back.LIGHTWHITE_EX + "Player"] = 'l'
    # table.align['Team'] = 'l'
    print(table)


if __name__ == "__main__":
    main()
