<?xml version="1.0"?>
<launch>
  <!--
    This file 'pretends' to load a driver for a UR robot, by accepting similar
    arguments and playing a similar role (ie: starting the driver node (in this
    case Gazebo) and loading the ros_control controllers).

    Some of the arguments to this .launch file will be familiar to those using
    the ur_robot_driver with their robot.

    Other parameters are specific to Gazebo.

    Note: we spawn and start the ros_control controllers here, as they are,
    together with gazebo_ros_control, essentially the replacement for the
    driver which would be used with a real robot.
  -->

  <!-- Parameters we share with ur_robot_driver -->
  <arg name="controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller"/>
  <arg name="stopped_controllers" default="joint_group_pos_controller"/>

  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)." />
  <arg name="gazebo_world" default="worlds/empty.world" doc="The '.world' file to load in Gazebo." />
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
  <arg name="paused" default="true" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  <arg name="spawn_z" default="0.0" doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- No need to launch this, we want to launch gazebo separetely.  -->
  <!-- Start Gazebo and load the empty world if requested to do so -->
  <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)"> -->
   <!-- <arg name="world_name" value="$(arg gazebo_world)"/> -->
     <!-- TODO have to replicate this file later -->
    <!-- <arg name="world_name" value="$(find atom_worlds)/worlds/calibration_studio.world"/> -->
    <!-- <arg name="paused" value="$(arg paused)"/> -->
    <!-- <arg name="gui" value="$(arg gui)"/> -->
  <!-- </include> -->

  <!-- Spawn the model loaded earlier in the simulation just started -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -J shoulder_pan_joint 0.709
      -J shoulder_lift_joint -0.960
      -J elbow_joint -0.093
      -J wrist_1_joint -0.453
      -J wrist_2_joint 0.465
      -J wrist_3_joint -0.035
      -unpause" output="screen" respawn="false" />


  <!-- <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -J robot::shoulder_pan_joint 1.709
      -J robot::shoulder_lift_joint -0.960
      -J robot::elbow_joint -2.093
      -J robot::wrist_1_joint -0.453
      -J robot::wrist_2_joint 1.465
      -J robot::wrist_3_joint -3.035
      -unpause" output="screen" respawn="false" /> -->
  <!-- Spawn the model loaded earlier in the simulation just started -->
<!--  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"-->
<!--    args="-->
<!--      -urdf-->
<!--      -param $(arg robot_description_param_name)-->
<!--      -model $(arg gazebo_model_name)"-->
<!--    output="screen" respawn="false" />-->


  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>
